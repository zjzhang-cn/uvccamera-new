/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "libyuv.h"
using namespace libyuv;
/* Header for class com_tsinglink_android_library_YUVTransfer */

#ifndef _Included_com_tsinglink_android_library_YuvLib
#define _Included_com_tsinglink_android_library_YuvLib
#ifdef __cplusplus
extern "C" {
#endif

#ifndef YUV_SIZE
	#define YUV_SIZE(w,h) w*h*3/2
#endif
#ifndef Y
	#define Y(s) (const uint8_t *)s
#endif
#ifndef U
	#define U(s) (const uint8_t *)(s+width*height)
#endif
#ifndef V
	#define V(s) (const uint8_t *)(s+(width*height + width * height/4))
#endif
#ifndef V422
	#define V422(s) (const uint8_t *)(s+(width*height + width * height/2))
#endif
#ifndef DY
	#define DY(s) (uint8_t *)s
#endif
#ifndef DU
	#define DU(s) (uint8_t *)(s+width*height)
#endif
#ifndef DV
	#define DV(s) (uint8_t *)(s+(width*height + width * height/4))
#endif

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_Android420ToARGBBf
  (JNIEnv *env, jclass, jobject yuv, jobject argb, jint width, jint height, jint mode)
{
  const uint8_t *src_y = (const uint8_t *)env->GetDirectBufferAddress(yuv);
  uint8_t *dst_argb = (uint8_t *)env->GetDirectBufferAddress(argb);
  if (mode == 0){ // I420
      Android420ToARGB(src_y, width, U(src_y), (width + 1)/2, V(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 1){  // YV12
      Android420ToARGB(src_y, width, V(src_y), (width + 1)/2, U(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 2){  // NV21
      Android420ToARGB(src_y, width, NULL,     0,             U(src_y),  width,         2, dst_argb, width*4, width, height);
  } else if (mode == 3){ // NV12
      Android420ToARGB(src_y, width, U(src_y), width,         NULL,      0,             2, dst_argb, width*4, width, height);
  }
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_Android420ToARGB
  (JNIEnv *env, jclass, jbyteArray yuv, jbyteArray argb, jint width, jint height, jint mode)
{
  const uint8_t *src_y = (const uint8_t *)env->GetByteArrayElements(yuv, 0);
  uint8_t *dst_argb = (uint8_t *)env->GetByteArrayElements(argb, 0);
  if (mode == 0){ // I420
      Android420ToARGB(src_y, width, U(src_y), (width + 1)/2, V(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 1){  // YV12
      Android420ToARGB(src_y, width, V(src_y), (width + 1)/2, U(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 2){  // NV21
      Android420ToARGB(src_y, width, NULL,     0,             U(src_y),  width,         2, dst_argb, width*4, width, height);
  } else if (mode == 3){ // NV12
      Android420ToARGB(src_y, width, U(src_y), width,         NULL,      0,             2, dst_argb, width*4, width, height);
  }
  env->ReleaseByteArrayElements(yuv, (jbyte *)src_y, 0);
  env->ReleaseByteArrayElements(argb, (jbyte *)dst_argb, 0);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_Android420ToABGRBf
  (JNIEnv *env, jclass, jobject yuv, jobject argb, jint width, jint height, jint mode)
{
  const uint8_t *src_y = (const uint8_t *)env->GetDirectBufferAddress(yuv);
  uint8_t *dst_argb = (uint8_t *)env->GetDirectBufferAddress(argb);
  if (mode == 0){ // I420
      Android420ToABGR(src_y, width, U(src_y), (width + 1)/2, V(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 1){  // YV12
      Android420ToABGR(src_y, width, V(src_y), (width + 1)/2, U(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 2){  // NV21
      Android420ToABGR(src_y, width, NULL,     0,             U(src_y),  width,         2, dst_argb, width*4, width, height);
  } else if (mode == 3){ // NV12
      Android420ToABGR(src_y, width, U(src_y), width,         NULL,      0,             2, dst_argb, width*4, width, height);
  }
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_Android420ToABGR
  (JNIEnv *env, jclass, jbyteArray yuv, jbyteArray argb, jint width, jint height, jint mode)
{
  const uint8_t *src_y = (const uint8_t *)env->GetByteArrayElements(yuv, 0);
  uint8_t *dst_argb = (uint8_t *)env->GetByteArrayElements(argb, 0);
  if (mode == 0){ // I420
      Android420ToABGR(src_y, width, U(src_y), (width + 1)/2, V(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 1){  // YV12
      Android420ToABGR(src_y, width, V(src_y), (width + 1)/2, U(src_y), (width + 1)/2,  1, dst_argb, width*4, width, height);
  } else if(mode == 2){  // NV21
      Android420ToABGR(src_y, width, NULL,     0,             U(src_y),  width,         2, dst_argb, width*4, width, height);
  } else if (mode == 3){ // NV12
      Android420ToABGR(src_y, width, U(src_y), width,         NULL,      0,             2, dst_argb, width*4, width, height);
  }
  env->ReleaseByteArrayElements(yuv, (jbyte *)src_y, 0);
  env->ReleaseByteArrayElements(argb, (jbyte *)dst_argb, 0);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ARGBToRGB24Bf
  (JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height)
{
  const uint8_t *src_argb = (const uint8_t *)env->GetDirectBufferAddress(src);
  uint8_t *dst_rgb24 = (uint8_t *)env->GetDirectBufferAddress(dst);
  ARGBToRGB24(src_argb, width*4, dst_rgb24, width*3, width, height);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ARGBToRGB24
  (JNIEnv *env, jclass, jbyteArray src, jbyteArray dst, jint width, jint height)
{
  const uint8_t *src_argb = (const uint8_t *)env->GetByteArrayElements(src, 0);
  uint8_t *dst_rgb24 = (uint8_t *)env->GetByteArrayElements(dst, 0);
  ARGBToRGB24(src_argb, width*4, dst_rgb24, width*3, width, height);
  env->ReleaseByteArrayElements(src, (jbyte *)src_argb, 0);
  env->ReleaseByteArrayElements(dst, (jbyte *)dst_rgb24, 0);
}


JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ARGBToI420Bf
  (JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height)
{
  const uint8_t *src_argb = (const uint8_t *)env->GetDirectBufferAddress(src);
  jbyte *dst_y = (jbyte *)env->GetDirectBufferAddress(dst);
  uint8_t *dstY = (uint8_t *)dst_y;
  uint8_t *dstU = dstY + width*height;
  uint8_t *dstV = dstU + width*height/4;

  ARGBToI420(src_argb, width*4, dstY, width, dstU, (width + 1)/2, dstV, (width + 1)/2, width, height);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ARGBToI420
  (JNIEnv *env, jclass, jbyteArray src, jbyteArray dst, jint width, jint height)
{
  const uint8_t *src_argb = (const uint8_t *)env->GetByteArrayElements(src, 0);
  jbyte *dst_y = env->GetByteArrayElements(dst, 0);
  uint8_t *dstY = (uint8_t *)dst_y;
  uint8_t *dstU = dstY + width*height;
  uint8_t *dstV = dstU + width*height/4;

  ARGBToI420(src_argb, width*4, dstY, width, dstU, (width + 1)/2, dstV, (width + 1)/2, width, height);

  env->ReleaseByteArrayElements(src, (jbyte *)src_argb, 0);
  env->ReleaseByteArrayElements(dst, (jbyte *)dst_y, 0);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ConvertToI420Bf
	(JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height,jint cropX, jint cropY,
  jint cropWidth, jint cropHeight, jint rotate, jint mode)
  {
    jbyte *src_y = (jbyte *)env->GetDirectBufferAddress(src);
    jbyte *dst_y = (jbyte *)env->GetDirectBufferAddress(dst);
    uint8_t *dstY = (uint8_t *)dst_y;
    uint8_t *dstU = dstY + cropWidth*cropHeight;
    uint8_t *dstV = dstU + cropWidth*cropHeight/4;
    uint_t fourcc;
    switch(mode){
      case 0:
        fourcc = FOURCC_I420;
      break;
      case 1:
        fourcc = FOURCC_YV12;
        break;
      case 2:
        fourcc = FOURCC_NV21;
        break;
      case 3:
        fourcc = FOURCC_NV12;
        break;
    }
    int dst_stride_y = rotate%180 == 0 ? cropWidth:cropHeight;
    ConvertToI420(Y(src_y), width*height*3/2,
        dstY, dst_stride_y,
        dstU, (dst_stride_y + 1)/2,
        dstV, (dst_stride_y + 1)/2,
        cropX, cropY, width, height, cropWidth, cropHeight,
        (RotationMode)rotate, fourcc
    );
  }

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ConvertToI420
	(JNIEnv *env, jclass, jbyteArray src, jbyteArray dst, jint width, jint height,jint cropX, jint cropY,
  jint cropWidth, jint cropHeight, jint rotate, jint mode)
  {
    jbyte *src_y = env->GetByteArrayElements(src, 0);
    jbyte *dst_y = env->GetByteArrayElements(dst, 0);
    uint8_t *dstY = (uint8_t *)dst_y;
    uint8_t *dstU = dstY + cropWidth*cropHeight;
    uint8_t *dstV = dstU + cropWidth*cropHeight/4;
    uint_t fourcc;
    switch(mode){
      case 0:
        fourcc = FOURCC_I420;
      break;
      case 1:
        fourcc = FOURCC_YV12;
        break;
      case 2:
        fourcc = FOURCC_NV21;
        break;
      case 3:
        fourcc = FOURCC_NV12;
        break;
    }
    int dst_stride_y = rotate%180 == 0 ? cropWidth:cropHeight;
    ConvertToI420(Y(src_y), width*height*3/2,
        dstY, dst_stride_y,
        dstU, (dst_stride_y + 1)/2,
        dstV, (dst_stride_y + 1)/2,
        cropX, cropY, width, height, cropWidth, cropHeight,
        (RotationMode)rotate, fourcc
    );
    env->ReleaseByteArrayElements(src, src_y, 0);
    env->ReleaseByteArrayElements(dst, dst_y, 0);
  }

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ConvertFromI420Bf
	(JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height, jint mode)
{
    jbyte *src_y = (jbyte *)env->GetDirectBufferAddress(src);
    jbyte *dst_y = (jbyte *)env->GetDirectBufferAddress(dst);
    uint_t fourcc;
    switch(mode){
      case 0:
        fourcc = FOURCC_I420;
        break;
      case 1:
        fourcc = FOURCC_YV12;
        break;
      case 2:
        fourcc = FOURCC_NV21;
        break;
      case 3:
        fourcc = FOURCC_NV12;
        break;
    }
    ConvertFromI420(Y(src_y), width, U(src_y), (width+1)/2, V(src_y),(width+1)/2, (uint8_t*)dst_y, width, width, height, fourcc);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_I422ToI420
	(JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height)
{
    jbyte *src_y = (jbyte *)env->GetDirectBufferAddress(src);
    jbyte *dst_y = (jbyte *)env->GetDirectBufferAddress(dst);
    I422ToI420(Y(src_y), width, U(src_y), (width+1)/2, V422(src_y),(width+1)/2, (uint8_t*)dst_y, width, DU(dst_y), (width+1)/2, DV(dst_y),(width+1)/2, width, height);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_ConvertFromI420
	(JNIEnv *env, jclass, jbyteArray src, jbyteArray dst, jint width, jint height, jint mode)
{
    jbyte *src_y = env->GetByteArrayElements(src, 0);
    jbyte *dst_y = env->GetByteArrayElements(dst, 0);
    uint_t fourcc;
    switch(mode){
      case 0:
        fourcc = FOURCC_I420;
        break;
      case 1:
        fourcc = FOURCC_YV12;
        break;
      case 2:
        fourcc = FOURCC_NV21;
        break;
      case 3:
        fourcc = FOURCC_NV12;
        break;
    }
    ConvertFromI420(Y(src_y), width, U(src_y), (width+1)/2, V(src_y),(width+1)/2, (uint8_t*)dst_y, width, width, height, fourcc);
    env->ReleaseByteArrayElements(src, src_y, 0);
    env->ReleaseByteArrayElements(dst, dst_y, 0);
}

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_I420ScaleBf
	(JNIEnv *env, jclass, jobject src, jobject dst, jint width, jint height, jint dstWidth, jint dstHeight, jint mode)
  {
    jbyte *src_y = (jbyte *)env->GetDirectBufferAddress(src);
    jbyte *dst_y = (jbyte *)env->GetDirectBufferAddress(dst);
    uint8_t *dstY = (uint8_t *)dst_y;
    uint8_t *dstU = dstY + dstWidth*dstHeight;
    uint8_t *dstV = dstU + dstWidth*dstHeight/4;

    I420Scale(Y(src_y),width, U(src_y), width/2, V(src_y), width/2, width, height,
      dstY, dstWidth, dstU, dstWidth/2, dstV, dstWidth/2, dstWidth, dstHeight, (FilterMode)mode);
  }

JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_I420Scale
	(JNIEnv *env, jclass, jbyteArray src, jbyteArray dst, jint width, jint height, jint dstWidth, jint dstHeight, jint mode)
  {
    jbyte *src_y = env->GetByteArrayElements(src, 0);
    jbyte *dst_y = env->GetByteArrayElements(dst, 0);
    uint8_t *dstY = (uint8_t *)dst_y;
    uint8_t *dstU = dstY + dstWidth*dstHeight;
    uint8_t *dstV = dstU + dstWidth*dstHeight/4;

    I420Scale(Y(src_y),width, U(src_y), width/2, V(src_y), width/2, width, height,
      dstY, dstWidth, dstU, dstWidth/2, dstV, dstWidth/2, dstWidth, dstHeight, (FilterMode)mode);

    env->ReleaseByteArrayElements(src, src_y, 0);
    env->ReleaseByteArrayElements(dst, dst_y, 0);
  }

JNIEXPORT jobject JNICALL Java_com_tsinglink_android_library_YuvLib_newByteBuffer
	(JNIEnv *env, jclass, jint capacity)
  {
    jbyte *buf = new jbyte[capacity];
    return env->NewDirectByteBuffer(buf, capacity);
  }
JNIEXPORT void JNICALL Java_com_tsinglink_android_library_YuvLib_freeByteBuffer
	(JNIEnv *env, jclass, jobject src)
  {
    jbyte *buf = (jbyte *)env->GetDirectBufferAddress(src);
    delete buf;
  }


#ifdef __cplusplus
}
#endif
#endif