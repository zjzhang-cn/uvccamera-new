apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
/*
 *  UVCCamera
 *  library and sample to access to UVC web camera on non-rooted Android device
 *
 * Copyright (c) 2014-2017 saki t_saki@serenegiant.com
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 *
 *  All files in the folder are under this Apache License, Version 2.0.
 *  Files in the libjpeg-turbo, libusb, libuvc, rapidjson folder
 *  may have a different license, see the respective files.
 */

import org.apache.tools.ant.taskdefs.condition.Os

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

    defaultConfig {
		targetSdkVersion versionTarget
		versionName uvcVersionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
	sourceSets {
		main {
		}
	}
}

tasks.withType(JavaCompile) {
//	compileTask -> compileTask.dependsOn ndkBuild
}

String getNdkBuildPath() {
	Properties properties = new Properties()
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
	def ndkBuildingDir = properties.getProperty("ndk.dir")
	def ndkBuildPath = ndkBuildingDir
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		ndkBuildPath = ndkBuildingDir + '/ndk-build.cmd'
	} else {
		ndkBuildPath = ndkBuildingDir + '/ndk-build'
	}
	return ndkBuildPath
}

task ndkBuild(type: Exec, description: 'Compile JNI source via NDK') {
	println('executing ndkBuild')
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, '-j8', '-C', file('src/main').absolutePath
}

task ndkClean(type: Exec, description: 'clean JNI libraries') {
	println('executing ndkBuild clean')
	def ndkBuildPath = getNdkBuildPath();
	commandLine ndkBuildPath, 'clean', '-C', file('src/main').absolutePath
}

//clean.dependsOn 'ndkClean'

dependencies {
    implementation fileTree(dir: new File(buildDir, 'libs'), include: '*.jar')

	implementation 'androidx.legacy:legacy-support-v4:1.0.0'
	implementation 'androidx.annotation:annotation:1.0.0'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
//    implementation project(path: ':usbCameraCommon')
}

apply plugin: 'maven-publish'
task sourceJar(type: Jar) {
	from android.sourceSets.main.java.srcDirs
	classifier "sources"
}

publishing {
	publications {
		bar(MavenPublication) {
			groupId 'com.serenegiant.usb'
			artifactId 'uvccamera'
			version android.defaultConfig.versionName
			artifact(sourceJar)
			artifact("$buildDir/outputs/aar/libuvccamera-release.aar")
		}
	}
}
// Because the components are created only during the afterEvaluate phase, you must
// configure your publications using the afterEvaluate() lifecycle method.
afterEvaluate {
	publishing {
		repositories {
			maven {
				url = "https://repo.rdc.aliyun.com/repository/39749-release-oGtrdD"
				credentials {
//					username maven_user
//					password maven_pwd
				}
			}
		}
		publications {
			// Creates a Maven publication called "release".
			release(MavenPublication) {
				groupId 'com.serenegiant.usb'
				artifactId 'uvccamera'
				version android.defaultConfig.versionName
				artifact(sourceJar)
				artifact("$buildDir/outputs/aar/libuvccamera-release.aar")
			}
		}
	}
}

//task javadoc(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

repositories {
    mavenCentral()
}